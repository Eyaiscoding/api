name: API GW CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths : 
      - "./apps/api"
  workflow_dispatch:

jobs:
  BuildPush:
    runs-on: ubuntu-latest
    environment: skillhub-api
    env:
      APPNAME: "${{ vars.APPNAME }}"
      ACRNAME: "${{ vars.ACRNAME}}"
      RG: "${{ vars.RG }}"
      ENVIRONMENT: "skillhub-api"
    steps:
      - name: Get application code from repo
        uses: actions/checkout@v2
        with:
          repository: "${{ vars.APPREPO}}"
          ref: "${{ github.ref }}"
      - name: Azure Login
        uses: azure/login@v1
        with:
          auth-type: IDENTITY
          client-id: '${{ secrets.AZURE_CLIENT_ID }}'
          tenant-id: '${{ secrets.AZURE_TENANT_ID }}'
          subscription-id: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'
      - name: ACR build
        id: acrbuild
        env:
          ACRSERVER: "${{ vars.ACRNAME }}.azurecr.io"
          APPREPOPATH: "${{ vars.APPREPOPATH}}"
          IMAGEREPO: "${{ vars.APPNAME }}"
        run: |
          echo "Requesting ACR build on $ACRNAME for image $IMAGEREPO:${{ github.sha }}"
          az acr build -t $REPOSITORY/$IMAGEREPO:${{ github.sha }} -r $ACRNAME $APPREPOPATH/.
  
  Deploy:
    runs-on: ubuntu-latest
    environment: skillhub-api
    needs: [BuildPush]
    env:
      APPNAME: "${{ vars.APPNAME }}"
      NAMESP: "${{ vars.NAMESPACE }}"
      AKSNAME: "${{ vars.AKSNAME}}"
      ACRNAME: "${{ vars.ACRNAME}}"
      RG: "${{ vars.RG }}"
    steps:
      - name: Get application k8s manifests from repo
        uses: actions/checkout@v2
      - name: Azure Login
        uses: azure/login@v1
        with:
          auth-type: IDENTITY
          client-id: '${{ secrets.AZURE_CLIENT_ID }}'
          tenant-id: '${{ secrets.AZURE_TENANT_ID }}'
          subscription-id: '${{ secrets.AZURE_SUBSCRIPTION_ID }}'
      - name: Install Kubectl
        uses: azure/setup-kubectl@v3.0
        with:
          version: "latest"
      - name: Set the target Azure Kubernetes Service (AKS) cluster.
        uses: azure/aks-set-context@v2.0
        with:
          cluster-name: "${{ vars.AKSNAME }}"
          resource-group: "${{ vars.RG }}"
     #aks-set-context doesn't do a kubelogin so we add it manually
      - name: Kubelogin
        env:
          kubeloginversion: "v0.0.11"
        run: |
          wget https://github.com/Azure/kubelogin/releases/download/${{ vars.kubeloginversion }}/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/bin
          kubelogin convert-kubeconfig -l azurecli
      - name: Deploy app to AKS
        uses: azure/k8s-deploy@v4.10.0
        env:
          ACRNAME: "${{ vars.ACRNAME}}"
        with:
          manifests: |
            ./manifests/api-gw.yml
          images: |
            ${{ vars.ACRNAME }}.azurecr.io/azure:${{ github.sha }}
          namespace: "${{ vars.NAMESPACE }}"
          action: deploy
#Github sha = unique ID of commit"
