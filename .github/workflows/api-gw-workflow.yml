name: API GW CI/CD Pipeline

env:

  #The Resource Group where your resources are deployed
  #required: true
  RG: "rfc-skillhub-rg"

  #The Name of the AKS resource
  #required: true
  AKSNAME: "rfc-skillhub-kc"

  #The Name of the ACR resource
  #required: true
  ACRNAME: "skillhub"

#The Name of the application
#required: true
  APPNAME: "api-gw"

   #The Kubernetes Namespace to deploy the Application to
   #required: false
  NAMESPACE: "default"

#The GitHub App code repo
#required: false
  APPREPO: "Eyaiscoding/api"

#The GitHub REF to use when referencing the App code repo
#required: false
  APPREPOREF: ""

#The directory in the repo containing the Dockerfile
#required: false
  APPREPOPATH: "."

#A GitHub Environment to pull action secrets from
#required: true
  ENVIRONMENT: "skillhub-api"

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
    paths : 
      - "./apps/api"
  workflow_dispatch:

jobs:
  BuildPush:
    runs-on: ubuntu-latest
    env:
      environment: $ENVIRONMENT 
      APPNAME: $APPNAME 
      ACRNAME: $ACRNAME
      RG: $RG

    steps:
      - name: Get application code from repo
        uses: actions/checkout@v2
        with:
          repository: $APPREPO
          ref: $APPREPOREF

      - name: Job parameter inspection
        run: |
          echo "RG is $RG"
          echo "AKS name is $AKSNAME"

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Debugging
        run: |
          echo "Debugging"
          az acr list

      - name: ACR build
        id: acrbuild
        env:
          ACRSERVER: "$ACRNAME.azurecr.io"
          APPREPOPATH: $APPREPOPATH
          IMAGEREPO: $APPNAME 
        run: |
          echo "Verifying directory contents in repo path $APPREPOPATH"
          ls $APPREPOPATH

          echo "Downcasing $ACRNAME for valid repository name"
          REPOSITORY=$(echo $ACRSERVER | tr '[:upper:]' '[:lower:]')

          echo "Requesting ACR build on $ACRNAME for image $IMAGEREPO:${{ github.sha }}"
          az acr build -t $REPOSITORY/$IMAGEREPO:${{ github.sha }} -r $ACRNAME $APPREPOPATH/.
  Deploy:
    runs-on: ubuntu-latest
    environment: $ENVIRONMENT
    needs: [BuildPush]
    env:
      APPNAME: $APPNAME
      NAMESP: $NAMESPACE
      AKSNAME: $AKSNAME
      ACRNAME: $ACRNAME
      RG: $RG 

    steps:
      - name: Get application k8s manifests from repo
        uses: actions/checkout@v2

      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Kubectl
        uses: azure/setup-kubectl@v3.0
        with:
          version: "latest"

      - name: Set the target Azure Kubernetes Service (AKS) cluster.
        uses: azure/aks-set-context@v2.0
        with:
          cluster-name: $AKSNAME 
          resource-group: $RG 

      #aks-set-context doesn't do a kubelogin so we add it manually
      - name: Kubelogin
        env:
          kubeloginversion: "v0.0.11"
        run: |
          wget https://github.com/Azure/kubelogin/releases/download/${{ env.kubeloginversion }}/kubelogin-linux-amd64.zip
          unzip kubelogin-linux-amd64.zip
          sudo mv bin/linux_amd64/kubelogin /usr/bin
          kubelogin convert-kubeconfig -l azurecli

      - name: Deploy app to AKS
        uses: azure/k8s-deploy@v1.5
        env:
          ACRNAME: "${{ env.ACRNAME}}"
        with:
          manifests: |
            ./manifests/api-gw.yml
          images: |
            $ACRNAME.azurecr.io/azure:${{ github.sha }}
          namespace: $NAMESPACE
          action: deploy
#Github sha = unique ID of commit
